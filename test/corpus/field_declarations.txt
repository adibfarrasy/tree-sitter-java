================================================================================
simple field declaration
================================================================================
class Test {
    private int value;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (integral_type)
        declarator: (variable_declarator
          name: (identifier))))))

================================================================================
field with initialization
================================================================================
class Test {
    private String name = "default";
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (type_identifier)
        declarator: (variable_declarator
          name: (identifier)
          value: (string_literal
            (string_fragment)))))))

================================================================================
static final field
================================================================================
class Test {
    public static final String CONSTANT = "value";
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (type_identifier)
        declarator: (variable_declarator
          name: (identifier)
          value: (string_literal
            (string_fragment)))))))

================================================================================
multiple field declarations
================================================================================
class Test {
    private int x, y, z;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (integral_type)
        declarator: (variable_declarator
          name: (identifier))
        declarator: (variable_declarator
          name: (identifier))
        declarator: (variable_declarator
          name: (identifier))))))

================================================================================
field with annotation
================================================================================
class Test {
    @SuppressWarnings("unused")
    private String data;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers
          (annotation
            name: (identifier)
            arguments: (annotation_argument_list
              (string_literal
                (string_fragment)))))
        type: (type_identifier)
        declarator: (variable_declarator
          name: (identifier))))))

================================================================================
generic field declaration
================================================================================
class Test {
    private List<String> items;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (generic_type
          (type_identifier)
          (type_arguments
            (type_identifier)))
        declarator: (variable_declarator
          name: (identifier))))))

================================================================================
array field declaration
================================================================================
class Test {
    private int[] numbers;
    private String[][] matrix;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (array_type
          element: (integral_type)
          dimensions: (dimensions))
        declarator: (variable_declarator
          name: (identifier)))
      (field_declaration
        (modifiers)
        type: (array_type
          element: (type_identifier)
          dimensions: (dimensions))
        declarator: (variable_declarator
          name: (identifier))))))

================================================================================
field with complex initialization
================================================================================
class Test {
    private Map<String, List<Integer>> data = new HashMap<>();
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (generic_type
          (type_identifier)
          (type_arguments
            (type_identifier)
            (generic_type
              (type_identifier)
              (type_arguments
                (type_identifier)))))
        declarator: (variable_declarator
          name: (identifier)
          value: (object_creation_expression
            type: (generic_type
              (type_identifier)
              (type_arguments))
            arguments: (argument_list)))))))

================================================================================
transient and volatile fields
================================================================================
class Test {
    private transient String cache;
    private volatile boolean flag;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (type_identifier)
        declarator: (variable_declarator
          name: (identifier)))
      (field_declaration
        (modifiers)
        type: (boolean_type)
        declarator: (variable_declarator
          name: (identifier))))))

================================================================================
field with multiple annotations
================================================================================
class Test {
    @NotNull
    @Size(min = 1, max = 100)
    private String value;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers
          (marker_annotation
            name: (identifier))
          (annotation
            name: (identifier)
            arguments: (annotation_argument_list
              (element_value_pair
                key: (identifier)
                value: (decimal_integer_literal))
              (element_value_pair
                key: (identifier)
                value: (decimal_integer_literal)))))
        type: (type_identifier)
        declarator: (variable_declarator
          name: (identifier))))))

================================================================================
protected and package-private fields
================================================================================
class Test {
    protected String protectedField;
    String packagePrivateField;
}
--------------------------------------------------------------------------------

(source_file
  (class_declaration
    name: (identifier)
    body: (class_body
      (field_declaration
        (modifiers)
        type: (type_identifier)
        declarator: (variable_declarator
          name: (identifier)))
      (field_declaration
        type: (type_identifier)
        declarator: (variable_declarator
          name: (identifier))))))
